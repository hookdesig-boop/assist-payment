import { Telegraf, session, Markup } from 'telegraf';
import config from './config/config.js';

import { createNotionTask, processAndSendLinks } from './src/utils/notion.js';
import { setupBotCommands } from './src/components/notionNotifier.js';
import { CryptoBotService } from './src/utils/cryptoBot.js';
import { localization } from './src/utils/localization.js';
import { currency } from './src/utils/currencys.js';

const bot = new Telegraf(config.TELEGRAM_BOT_TOKEN);
const cryptoBot = new CryptoBotService(bot);

// –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Å—Å–∏–∏
bot.use(session());


// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è pending –ø–ª–∞—Ç–µ–∂–µ–π (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –ë–î)
const pendingPayments = new Map();

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
let autoCheckInterval = null;
let paymentCheckInterval = null;

// ========== –°–ò–°–¢–ï–ú–ê –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ô –ü–†–û–í–ï–†–ö–ò –ü–õ–ê–¢–ï–ñ–ï–ô ==========

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è pending –ø–ª–∞—Ç–µ–∂–∞
function savePendingPayment(invoiceId, paymentData) {
  pendingPayments.set(invoiceId, {
    ...paymentData,
    createdAt: new Date(),
    checkedAt: null,
    attempts: 0
  });
  console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω pending –ø–ª–∞—Ç–µ–∂: ${invoiceId} –¥–ª—è –∑–∞–∫–∞–∑–∞ #${paymentData.order.orderNumber}`);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è pending –ø–ª–∞—Ç–µ–∂–∞
function getPendingPayment(invoiceId) {
  return pendingPayments.get(invoiceId);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è pending –ø–ª–∞—Ç–µ–∂–∞
function removePendingPayment(invoiceId) {
  pendingPayments.delete(invoiceId);
  console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω pending –ø–ª–∞—Ç–µ–∂: ${invoiceId}`);
}

// –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ pending –ø–ª–∞—Ç–µ–∂–µ–π
async function checkPendingPayments() {
  try {
    if (pendingPayments.size === 0) return;

    console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ ${pendingPayments.size} pending –ø–ª–∞—Ç–µ–∂–µ–π...`);
    
    let processed = 0;
    let errors = 0;

    for (const [invoiceId, paymentData] of pendingPayments.entries()) {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–∑ –≤ 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∏–Ω–≤–æ–π—Å–∞
        if (paymentData.checkedAt && (Date.now() - paymentData.checkedAt) < 30000) {
          continue;
        }

        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
        paymentData.attempts += 1;
        paymentData.checkedAt = Date.now();

        console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–≤–æ–π—Å–∞ ${invoiceId} (–ø–æ–ø—ã—Ç–∫–∞ ${paymentData.attempts})`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ CryptoBot
        const paymentStatus = await cryptoBot.checkPaymentStatus(invoiceId);
        
        if (paymentStatus.status === 'paid') {
          console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π –∏–Ω–≤–æ–π—Å: ${invoiceId}`);
          
          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –≤ Notion
          await processSuccessfulPayment(invoiceId, paymentData);
          processed++;
          
        } else if (paymentStatus.status === 'expired' || paymentData.attempts > 12) {
          // –£–¥–∞–ª—è–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∏–ª–∏ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä—ã–µ –ø–ª–∞—Ç–µ–∂–∏ (12 –ø–æ–ø—ã—Ç–æ–∫ = 6 –º–∏–Ω—É—Ç)
          console.log(`üóëÔ∏è –£–¥–∞–ª—è–µ–º –∏–Ω–≤–æ–π—Å ${invoiceId} (—Å—Ç–∞—Ç—É—Å: ${paymentStatus.status}, –ø–æ–ø—ã—Ç–∫–∏: ${paymentData.attempts})`);
          removePendingPayment(invoiceId);
        }

      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω–≤–æ–π—Å–∞ ${invoiceId}:`, error);
        errors++;
      }
    }

    if (processed > 0 || errors > 0) {
      console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${processed}, –æ—à–∏–±–æ–∫ ${errors}`);
    }

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ checkPendingPayments:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –≤ Notion
async function processSuccessfulPayment(invoiceId, paymentData) {
  try {
    const { order, invoiceAmount, userId, chatId } = paymentData;
    
    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–π
    const getLocalizations = localization();
    const localizationNames = order.selectedLocalizations
      .map(id => getLocalizations.find(loc => loc.id === id)?.name)
      .filter(Boolean);

    console.log(`üì§ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ Notion –¥–ª—è –∏–Ω–≤–æ–π—Å–∞ ${invoiceId}, –∑–∞–∫–∞–∑ #${order.orderNumber}`);

    // –°–û–ó–î–ê–ï–ú –ó–ê–î–ê–ß–£ –í NOTION –ü–û–°–õ–ï –û–ü–õ–ê–¢–´
    const notionTask = await createNotionTask({
      orderNumber: order.orderNumber,
      userId: userId,
      adaptationsCount: order.adaptationsCount,
      localizations: localizationNames,
      bank: order.bank,
      winningAmount: order.winningAmount,
      currency: order.currency,
      additionalInfo: order.additionalInfo,
      paymentStatus: 'paid',
      invoiceId: invoiceId
    });

    if (notionTask && notionTask.id) {
      console.log(`‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ –≤ Notion: ${notionTask.id} –¥–ª—è –∑–∞–∫–∞–∑–∞ #${order.orderNumber}`);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      try {
        await bot.telegram.sendMessage(
          chatId,
          `üéâ *–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!*\n\n` +
          `‚úÖ –ó–∞–∫–∞–∑ #${order.orderNumber} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –ø–µ—Ä–µ–¥–∞–Ω –≤ —Ä–∞–±–æ—Ç—É.\n` +
          `üí∞ –°—É–º–º–∞ –æ–ø–ª–∞—Ç—ã: ${invoiceAmount} USDT\n` +
          `üìã ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${invoiceId}\n` +
          `üîó ID –≤ Notion: ${notionTask.id}\n\n` +
          `–ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å –∫–æ–≥–¥–∞ –∞–¥–∞–ø—Ç–∞—Ü–∏—è –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–∞.`,
          { parse_mode: 'Markdown' }
        );
      } catch (msgError) {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:', msgError);
      }

      // –£–¥–∞–ª—è–µ–º –∏–∑ pending
      removePendingPayment(invoiceId);
      
    } else {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –≤ Notion');
    }

  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ ${invoiceId}:`, error);
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ
    try {
      if (config.ADMIN_CHAT_ID) {
        await bot.telegram.sendMessage(
          config.ADMIN_CHAT_ID,
          `üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –≤ Notion –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã\n\n` +
          `–ò–Ω–≤–æ–π—Å: ${invoiceId}\n` +
          `–ó–∞–∫–∞–∑: ${paymentData.order.orderNumber}\n` +
          `–û—à–∏–±–∫–∞: ${error.message}`
        );
      }
    } catch (adminError) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞:', adminError);
    }
  }
}

// –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
function startPaymentChecking() {
  if (paymentCheckInterval) {
    clearInterval(paymentCheckInterval);
  }

  paymentCheckInterval = setInterval(checkPendingPayments, 10000); // –ö–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥

  console.log('‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π –∑–∞–ø—É—â–µ–Ω–∞ (–∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥)');
}

// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
function stopPaymentChecking() {
  if (paymentCheckInterval) {
    clearInterval(paymentCheckInterval);
    paymentCheckInterval = null;
    console.log('üõë –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
  }
}

// ========== –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò ==========

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–∫–∞–∑–æ–≤
function startAutoChecking(minutes = 15) {
  if (autoCheckInterval) {
    clearInterval(autoCheckInterval);
  }

  const intervalMs = minutes * 60 * 1000;
  
  autoCheckInterval = setInterval(async () => {
    try {
      console.log(`üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–∞–∑–æ–≤... (${new Date().toLocaleString()})`);
      
      const result = await processAndSendLinks(bot);
      
      console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${result.sent}, –æ—à–∏–±–æ–∫: ${result.errors}`);
      
      if (result.sent > 0) {
        console.log(`‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${result.sent} —Å—Å—ã–ª–æ–∫`);
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–∫–∞–∑–æ–≤:', error);
    }
  }, intervalMs);

  console.log(`‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –∑–∞–ø—É—â–µ–Ω–∞ (–∫–∞–∂–¥—ã–µ ${minutes} –º–∏–Ω—É—Ç)`);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
function stopAutoChecking() {
  if (autoCheckInterval) {
    clearInterval(autoCheckInterval);
    autoCheckInterval = null;
    console.log('üõë –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞—á–∏ –≤ Notion
// async function sendTestTaskToNotion(ctx) {
//   try {
//     await ctx.reply('üß™ –°–æ–∑–¥–∞—é —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–¥–∞—á—É –≤ Notion...');
    
//     const testTaskData = {
//       orderNumber: 565447854123654,
//       userId: 465065447,
//       adaptationsCount: 2,
//       localizations: ['üá∫üá∏ EN (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π)', 'üá∑üá∫ RU (—Ä—É—Å—Å–∫–∏–π)'],
//       bank: 'Test Bank',
//       winningAmount: 1000,
//       currency: 'USD',
//       additionalInfo: '–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ —á–µ—Ä–µ–∑ –±–æ—Ç–∞',
//       paymentStatus: 'paid',
//       invoiceId: `test_invoice_${Date.now()}`
//     };
    
//     const notionTask = await createNotionTask(testTaskData);
    
//     if (notionTask && notionTask.id) {
//       await ctx.reply(
//         `‚úÖ *–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!*\n\n` +
//         `üìã –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: ${testTaskData.orderNumber}\n` +
//         `üé¨ –ê–¥–∞–ø—Ç–∞—Ü–∏–π: ${testTaskData.adaptationsCount}\n` +
//         `üåç –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏: ${testTaskData.localizations.join(', ')}\n` +
//         `üè¶ –ë–∞–Ω–∫: ${testTaskData.bank}\n` +
//         `üí∞ –°—É–º–º–∞: ${testTaskData.winningAmount} ${testTaskData.currency}\n` +
//         `üìù –î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: ${testTaskData.additionalInfo}\n\n` +
//         `üîó ID –≤ Notion: ${notionTask.id}`,
//         { parse_mode: 'Markdown' }
//       );
      
//       console.log(`‚úÖ Test task created in Notion: ${notionTask.id}`);
//     } else {
//       throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –≤ Notion');
//     }
    
//   } catch (error) {
//     console.error('‚ùå Error creating test task in Notion:', error);
//     await ctx.reply(
//       `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞–¥–∞—á–∏:\n${error.message}`
//     );
//   }
// }

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–π
const getLocalizations = localization();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤–∞–ª—é—Ç
function createCurrencyKeyboard() {
const currencies = currency
  
  const buttons = currencies.map(currency => 
    Markup.button.callback(currency.name, `currency_${currency.code}`)
  );
  
  // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ 2 –∫–Ω–æ–ø–∫–∏
  const rows = [];
  for (let i = 0; i < buttons.length; i += 2) {
    rows.push(buttons.slice(i, i + 2));
  }
  
  return Markup.inlineKeyboard(rows);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–π
function createLocalizationsKeyboard(selectedIds = []) {
  const buttons = getLocalizations.map(loc => {
    const isSelected = selectedIds.includes(loc.id);
    const prefix = isSelected ? '‚úÖ ' : '';
    return Markup.button.callback(
      `${prefix}${loc.name}`,
      `localization_${loc.id}`
    );
  });
  
  // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ 2 –∫–Ω–æ–ø–∫–∏
  const rows = [];
  for (let i = 0; i < buttons.length; i += 2) {
    rows.push(buttons.slice(i, i + 2));
  }
  
  return rows;
}


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞
function calculateOrderPrice(order) {
  const pricePerAdaptation = config.PRICES.ADAPTATION; // —Ü–µ–Ω–∞ –∑–∞ –∞–¥–∞–ø—Ç–∞—Ü–∏—é
  const adaptationsPrice = order.adaptationsCount * pricePerAdaptation;
  
  return {
    adaptationsPrice,
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞ —á–µ—Ä–µ–∑ CryptoBot
async function createInvoice(ctx) {
  try {
    const order = ctx.session.order;
    const userId = ctx.from.id;
    const chatId = ctx.chat.id;
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—É
    const priceInfo = calculateOrderPrice(order);
    const amount = priceInfo.adaptationsPrice * 1.03;
    
    // –°–æ–∑–¥–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    const description = `–ó–∞–∫–∞–∑ #${order.orderNumber} - ${order.adaptationsCount} –∞–¥–∞–ø—Ç–∞—Ü–∏–π`;
    
    console.log(`üí∞ Creating invoice for user ${userId}: order ${order.orderNumber}, amount: ${amount} USD`);
    
    // –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å —á–µ—Ä–µ–∑ CryptoBot
    const invoice = await cryptoBot.createInvoice(amount, description, order.orderNumber);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω–≤–æ–π—Å–µ –≤ —Å–µ—Å—Å–∏–∏
    ctx.session.invoiceId = invoice.invoice_id;
    ctx.session.invoiceAmount = amount;
    ctx.session.payUrl = invoice.pay_url;
    
    console.log(`‚úÖ Invoice created: ${invoice.invoice_id}`);
    
    // –°–û–•–†–ê–ù–Ø–ï–ú –í PENDING –ü–õ–ê–¢–ï–ñ–ò –î–õ–Ø –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ô –ü–†–û–í–ï–†–ö–ò
    savePendingPayment(invoice.invoice_id, {
      order: { ...order },
      invoiceAmount: amount,
      payUrl: invoice.pay_url,
      userId: userId,
      chatId: chatId
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø–ª–∞—Ç–µ
    await ctx.reply(
      `üí≥ *–°—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É*\n\n` +
      `üìã –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: #${order.orderNumber}\n` +
      `üé¨ –ê–¥–∞–ø—Ç–∞—Ü–∏–π: ${order.adaptationsCount}\n` +
      `üíµ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: ${amount} USDT\n\n` +
      `‚è≥ –°—á–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç\n` +
      `ü§ñ –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n\n` +
      `–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ:`,
      {
        parse_mode: 'Markdown',
        ...Markup.inlineKeyboard([
          [Markup.button.url('üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π', invoice.pay_url)],
          [Markup.button.callback('üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É', 'check_payment')],
          [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', 'cancel_payment')]
        ])
      }
    );
    
  } catch (error) {
    console.error('‚ùå Error creating invoice:', error);
    await ctx.reply(
      '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.'
    );
  }
}

// ========== –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ==========

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.start(async (ctx) => {
  console.log('üë§ User started:', ctx.from.id);
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é
  ctx.session = {
    step: 'awaiting_order_number',
    order: {
      selectedLocalizations: []
    }
  };
  
  await ctx.reply(
    `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –ø–æ–º–æ–≥—É –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –∏ –æ–ø–ª–∞—Ç–∏—Ç—å –µ–≥–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π.\n\n` +
    `üìã –î–ª—è –Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞:`
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –∑–∞–∫–∞–∑–∞)
bot.on('text', async (ctx) => {
  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
  if (ctx.message.text.startsWith('/')) {
    return;
  }

  if (ctx.session?.step === 'awaiting_order_number') {
    const orderNumber = ctx.message.text.trim();
    
    if (!/^\d+$/.test(orderNumber)) {
      await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):');
      return;
    }
    
    ctx.session.order.orderNumber = orderNumber;
    ctx.session.step = 'selecting_adaptations';
    
    console.log(`üìù User ${ctx.from.id} entered order number: ${orderNumber}`);
    
    await ctx.reply(
      `‚úÖ –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: ${orderNumber}\n\n` +
      `üé¨ –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–¥–∞–ø—Ç–∞—Ü–∏–π:`,
      Markup.inlineKeyboard([
        [
          Markup.button.callback('1', 'adaptations_1'),
          Markup.button.callback('2', 'adaptations_2'),
          Markup.button.callback('3', 'adaptations_3')
        ],
        [
          Markup.button.callback('4', 'adaptations_4'),
          Markup.button.callback('5', 'adaptations_5'),
          Markup.button.callback('6', 'adaptations_6')
        ]
      ])
    );
    return;
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –±–∞–Ω–∫–∞
  if (ctx.session?.step === 'entering_bank') {
    const bank = ctx.message.text.trim();
    
    if (bank.length === 0) {
      await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞:');
      return;
    }
    
    ctx.session.order.bank = bank;
    ctx.session.step = 'entering_winning_amount';
    
    console.log(`üè¶ User ${ctx.from.id} entered bank: ${bank}`);
    
    await ctx.reply(
      `‚úÖ –ë–∞–Ω–∫: ${bank}\n\n` +
      `üí∞ –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –≤—ã–∏–≥—Ä—ã—à–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):`
    );
    return;
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –≤—ã–∏–≥—Ä—ã—à–∞
  if (ctx.session?.step === 'entering_winning_amount') {
    const winningAmount = parseFloat(ctx.message.text.trim());
    
    if (isNaN(winningAmount) || winningAmount <= 0) {
      await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –≤—ã–∏–≥—Ä—ã—à–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –±–æ–ª—å—à–µ 0):');
      return;
    }
    
    ctx.session.order.winningAmount = winningAmount;
    ctx.session.step = 'selecting_currency';
    
    console.log(`üí∞ User ${ctx.from.id} entered winning amount: ${winningAmount}`);
    
    await ctx.reply(
      `‚úÖ –°—É–º–º–∞ –≤—ã–∏–≥—Ä—ã—à–∞: ${winningAmount}\n\n` +
      `üí± –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É:`,
      createCurrencyKeyboard()
    );
    return;
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
  if (ctx.session?.step === 'entering_additional_info') {
    const additionalInfo = ctx.message.text.trim();
    
    ctx.session.order.additionalInfo = additionalInfo;
    
    console.log(`üìù User ${ctx.from.id} entered additional info: ${additionalInfo}`);
    
    // –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å
    await createInvoice(ctx);
    return;
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã
bot.action(/currency_(.+)/, async (ctx) => {
  const currencyCode = ctx.match[1];
  
  ctx.session.order.currency = currencyCode;
  ctx.session.step = 'entering_additional_info';
  
  console.log(`üí± User ${ctx.from.id} selected currency: ${currencyCode}`);
  
  await ctx.editMessageText(
    `‚úÖ –í–∞–ª—é—Ç–∞: ${currencyCode}\n\n` +
    `üìù –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–Ω–µ—Ç", –µ—Å–ª–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è):`
  );
  
  await ctx.answerCbQuery();
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–¥–∞–ø—Ç–∞—Ü–∏–π
bot.action(/adaptations_(\d+)/, async (ctx) => {
  const adaptationsCount = parseInt(ctx.match[1]);
  
  ctx.session.order.adaptationsCount = adaptationsCount;
  ctx.session.step = 'selecting_localizations';
  
  console.log(`üé¨ User ${ctx.from.id} selected ${adaptationsCount} adaptations`);
  
  const keyboardRows = createLocalizationsKeyboard([]);
  
  if (adaptationsCount > 1) {
    keyboardRows.push([
      Markup.button.callback('‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä', 'finish_localization')
    ]);
  }
  
  await ctx.editMessageText(
    `üé¨ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–¥–∞–ø—Ç–∞—Ü–∏–π: ${adaptationsCount}\n\n` +
    `üåç –í—ã–±–µ—Ä–∏—Ç–µ ${adaptationsCount === 1 ? '–æ–¥–Ω—É –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—é' : '–ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏'}:\n` +
    `‚úÖ –í—ã–±—Ä–∞–Ω–æ: 0 –∏–∑ ${adaptationsCount}`,
    Markup.inlineKeyboard(keyboardRows)
  );
  
  await ctx.answerCbQuery();
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
bot.action(/localization_(\d+)/, async (ctx) => {
  const localizationId = parseInt(ctx.match[1]);
  const order = ctx.session.order;
  
  const selectedLocalization = getLocalizations.find(loc => loc.id === localizationId);
  
  if (!selectedLocalization) {
    await ctx.answerCbQuery('‚ùå –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    return;
  }
  
  if (order.adaptationsCount === 1) {
    order.selectedLocalizations = [localizationId];
    
    await ctx.editMessageText(
      `‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏: ${selectedLocalization.name}\n\n` +
      `üè¶ –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞:`
    );
    
    ctx.session.step = 'entering_bank';
    await ctx.answerCbQuery();
    return;
  }
  
  const index = order.selectedLocalizations.indexOf(localizationId);
  
  if (index > -1) {
    order.selectedLocalizations.splice(index, 1);
  } else {
    if (order.selectedLocalizations.length >= order.adaptationsCount) {
      await ctx.answerCbQuery(`‚ùå –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –º–∞–∫—Å–∏–º—É–º ${order.adaptationsCount} –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–π`);
      return;
    }
    order.selectedLocalizations.push(localizationId);
  }
  
  const selectedCount = order.selectedLocalizations.length;
  const keyboardRows = createLocalizationsKeyboard(order.selectedLocalizations);
  
  keyboardRows.push([
    Markup.button.callback(
      selectedCount > 0 ? '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä' : '‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏', 
      'finish_localization'
    )
  ]);
  
  await ctx.editMessageText(
    `üé¨ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–¥–∞–ø—Ç–∞—Ü–∏–π: ${order.adaptationsCount}\n\n` +
    `üåç –í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏:\n` +
    `‚úÖ –í—ã–±—Ä–∞–Ω–æ: ${selectedCount} –∏–∑ ${order.adaptationsCount}`,
    Markup.inlineKeyboard(keyboardRows)
  );
  
  await ctx.answerCbQuery();
});

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–π
bot.action('finish_localization', async (ctx) => {
  const order = ctx.session.order;
  
  if (order.selectedLocalizations.length === 0) {
    await ctx.answerCbQuery('‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—é');
    return;
  }
  
  const selectedNames = order.selectedLocalizations
    .map(id => getLocalizations.find(loc => loc.id === id)?.name)
    .filter(Boolean)
    .join(', ');
  
  ctx.session.step = 'entering_bank';
  
  await ctx.editMessageText(
    `üéâ –û—Ç–ª–∏—á–Ω–æ! –í—ã –≤—ã–±—Ä–∞–ª–∏ ${order.adaptationsCount} –∞–¥–∞–ø—Ç–∞—Ü–∏–π –¥–ª—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–π:\n${selectedNames}\n\n` +
    `üè¶ –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞:`
  );
  
  await ctx.answerCbQuery();
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã (—Ä—É—á–Ω–∞—è)
bot.action('check_payment', async (ctx) => {
  await ctx.answerCbQuery('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–ª–∞—Ç—É...');
  
  const invoiceId = ctx.session.invoiceId;
  
  if (!invoiceId) {
    await ctx.reply('‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—á–µ—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    return;
  }
  
  await ctx.editMessageText('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã...');
  
  try {
    const paymentStatus = await cryptoBot.checkPaymentStatus(invoiceId);
    
    if (paymentStatus.status === 'paid') {
      // –ï—Å–ª–∏ –æ–ø–ª–∞—á–µ–Ω–æ, –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
      const pendingData = getPendingPayment(invoiceId);
      if (pendingData) {
        await processSuccessfulPayment(invoiceId, pendingData);
      } else {
        await ctx.editMessageText('‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–∫–∞–∑...');
        // –ï—Å–ª–∏ –Ω–µ—Ç –≤ pending, –Ω–æ –æ–ø–ª–∞—á–µ–Ω–æ, —Å–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
        await completePayment(ctx);
      }
    } else {
      await ctx.editMessageText(
        `‚ùå –û–ø–ª–∞—Ç–∞ –µ—â–µ –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª–∞.\n\n` +
        `–°—Ç–∞—Ç—É—Å: ${paymentStatus.status}\n\n` +
        `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã. –°—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.`,
        Markup.inlineKeyboard([
          [Markup.button.url('üí≥ –û–ø–ª–∞—Ç–∏—Ç—å', ctx.session.payUrl)],
          [Markup.button.callback('üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â–µ —Ä–∞–∑', 'check_payment')],
          [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', 'cancel_payment')]
        ])
      );
    }
  } catch (error) {
    console.error('‚ùå Error checking payment:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–ø–ª–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û—Ç–º–µ–Ω–∞ –æ–ø–ª–∞—Ç—ã
bot.action('cancel_payment', async (ctx) => {
  await ctx.answerCbQuery('‚ùå –û—Ç–º–µ–Ω—è–µ–º –æ–ø–ª–∞—Ç—É...');
  
  const invoiceId = ctx.session.invoiceId;
  
  // –£–¥–∞–ª—è–µ–º –∏–∑ pending –ø–ª–∞—Ç–µ–∂–µ–π
  if (invoiceId) {
    removePendingPayment(invoiceId);
  }
  
  // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
  ctx.session.step = 'completed';
  ctx.session.order = {};
  ctx.session.invoiceId = null;
  ctx.session.payUrl = null;
  
  await ctx.editMessageText(
    '‚ùå –û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n' +
    '–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start'
  );
});

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Notion (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
async function completePayment(ctx) {
  try {
    const order = ctx.session.order;
    const userId = ctx.from.id;
    
    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–π
    const localizationNames = order.selectedLocalizations
      .map(id => getLocalizations.find(loc => loc.id === id)?.name)
      .filter(Boolean);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ Notion
    await ctx.editMessageText('üì§ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ —Å–∏—Å—Ç–µ–º–µ...');
    
    const notionTask = await createNotionTask({
      orderNumber: order.orderNumber,
      userId: userId,
      adaptationsCount: order.adaptationsCount,
      localizations: localizationNames,
      bank: order.bank,
      winningAmount: order.winningAmount,
      currency: order.currency,
      additionalInfo: order.additionalInfo,
      paymentStatus: 'paid',
      invoiceId: ctx.session.invoiceId
    });
    
    // –£—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    await ctx.reply(
      `üéâ *–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!*\n\n` +
      `‚úÖ –ó–∞–∫–∞–∑ #${order.orderNumber} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –ø–µ—Ä–µ–¥–∞–Ω –≤ —Ä–∞–±–æ—Ç—É.\n` +
      `üí∞ –°—É–º–º–∞ –æ–ø–ª–∞—Ç—ã: ${ctx.session.invoiceAmount} USDT\n` +
      `üìã ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${ctx.session.invoiceId}\n\n` +
      `–ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å –∫–æ–≥–¥–∞ –∞–¥–∞–ø—Ç–∞—Ü–∏—è –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–∞.`,
      { parse_mode: 'Markdown' }
    );
    
    console.log(`‚úÖ Order ${order.orderNumber} completed for user ${userId}`);
    
    // –£–¥–∞–ª—è–µ–º –∏–∑ pending –ø–ª–∞—Ç–µ–∂–µ–π
    removePendingPayment(ctx.session.invoiceId);
    
    // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
    ctx.session.step = 'completed';
    ctx.session.order = {};
    ctx.session.invoiceId = null;
    ctx.session.payUrl = null;
    
  } catch (error) {
    console.error('‚ùå Error completing payment:', error);
    await ctx.reply(
      '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.'
    );
  }
}

// ========== –ö–û–ú–ê–ù–î–´ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê ==========

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
bot.command('payment_stats', async (ctx) => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞ (–¥–æ–±–∞–≤—å—Ç–µ —Å–≤–æ—é –ª–æ–≥–∏–∫—É)
  if (ctx.from.id !== config.ADMIN_CHAT_ID) {
    return await ctx.reply('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
  }
  
  const stats = {
    totalPending: pendingPayments.size,
    pendingList: Array.from(pendingPayments.entries()).map(([id, data]) => 
      `‚Ä¢ ${id}: –∑–∞–∫–∞–∑ #${data.order.orderNumber}, –ø–æ–ø—ã—Ç–æ–∫: ${data.attempts}`
    ).join('\n')
  };
  
  await ctx.reply(
    `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π*\n\n` +
    `‚è≥ –û–∂–∏–¥–∞—é—Ç –æ–ø–ª–∞—Ç—ã: ${stats.totalPending}\n\n` +
    `${stats.pendingList || '–ù–µ—Ç pending –ø–ª–∞—Ç–µ–∂–µ–π'}`,
    { parse_mode: 'Markdown' }
  );
});

// –¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å–∫–∞–µ–º setupBotCommands –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
setupBotCommands(bot);


setInterval(() => {
  processAndSendLinks(bot)
}, 16*60*1000);

// ========== –ó–ê–ü–£–°–ö –ë–û–¢–ê ==========

// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
bot.launch().then(() => {
  console.log('‚úÖ Bot started successfully');
  console.log('ü§ñ Bot is ready to receive commands');
  console.log('üí≥ CryptoBot integration: ACTIVE');
  console.log('üîç Payment auto-check: ACTIVE');
  
  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
  startAutoChecking(15); // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
  startPaymentChecking(); // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
  
  console.log(`‚è≥ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ ${pendingPayments.size} pending –ø–ª–∞—Ç–µ–∂–µ–π`);
  
}).catch((error) => {
  console.error('‚ùå Failed to start bot:', error);
});




// Graceful shutdown
process.once('SIGINT', () => {
  console.log('üõë Stopping bot...');
  stopAutoChecking();
  stopPaymentChecking();
  bot.stop('SIGINT');
});

process.once('SIGTERM', () => {
  console.log('üõë Stopping bot...');
  stopAutoChecking();
  stopPaymentChecking();
  bot.stop('SIGTERM');
});