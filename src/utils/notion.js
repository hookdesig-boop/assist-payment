import { Client } from "@notionhq/client";
import config from "../../config/config.js";




const notion = new Client({
  auth: config.NOTION.API_KEY,
});



// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è —Å–≤–æ–π—Å—Ç–≤–∞
function getPropertyValue(property) {
  try {
    if (!property) return null;

    switch (property.type) {
      case "rich_text":
        return (
          property.rich_text?.map((item) => item.plain_text).join("") || null
        );

      case "title":
        return property.title?.map((item) => item.plain_text).join("") || null;

      case "number":
        return property.number;

      case "url":
        return property.url;

      case "status":
        return property.status?.name || null;

      case "select":
        return property.select?.name || null;

      default:
        console.log(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–≤–æ–π—Å—Ç–≤–∞: ${property.type}`);
        return null;
    }
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–Ω–∞—á–µ–Ω–∏—è —Å–≤–æ–π—Å—Ç–≤–∞:`, error);
    return null;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
export function extractDataForValidation(pageObj) {
  try {
    if (!pageObj || !pageObj.properties) {
      console.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –æ–±—ä–µ–∫—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã");
      return null;
    }

    const result = {
      pageInfo: {
        id: pageObj.id,
        createdTime: pageObj.created_time,
        lastEditedTime: pageObj.last_edited_time,
        url: pageObj.url,
      },
      properties: {},
      rawProperties: pageObj.properties,
    };

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ —Å–≤–æ–π—Å—Ç–≤–∞
    for (const [propName, property] of Object.entries(pageObj.properties)) {
      result.properties[propName] = {
        value: getPropertyValue(property),
        type: property.type,
        id: property.id,
        raw: property,
      };
    }

    return result;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤ extractDataForValidation:", error);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –≤ Notion
export async function createNotionTask(props) {
  const {
    orderNumber,
    userId,
    adaptationsCount,
    localizations,
    bank,
    winningAmount,
    currency,
    additionalInfo,
    paymentStatus = "paid",
  } = props;

  try {
    console.log("üì§ Sending to Notion:", props);

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–∞—Å—Å–∏–≤ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–π –≤ —Å—Ç—Ä–æ–∫—É
    const localizationsText = Array.isArray(localizations)
      ? localizations.join(", ")
      : localizations;

    const properties = {
      // –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ)
      Name: {
        title: [
          {
            type: "text",
            text: { content: `–ó–∞–∫–∞–∑ ‚Ññ${orderNumber}` },
          },
        ],
      },
      // –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
      OrderNumber: {
        rich_text: [
          {
            type: "text",
            text: { content: orderNumber.toString() },
          },
        ],
      },
      // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
      userID: {
        number: parseInt(userId),
      },
      // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–¥–∞–ø—Ç–∞—Ü–∏–π
      AdaptationsCount: {
        number: parseInt(adaptationsCount) || 0,
      },
      // –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
      Localization: {
        rich_text: [
          {
            type: "text",
            text: { content: localizationsText || "" },
          },
        ],
      },
      // –ë–∞–Ω–∫
      Bank: {
        rich_text: [
          {
            type: "text",
            text: { content: bank || "" },
          },
        ],
      },
      // –°—É–º–º–∞ –≤—ã–∏–≥—Ä—ã—à–∞
      WinningAmount: {
        number: parseFloat(winningAmount) || 0,
      },
      // –í–∞–ª—é—Ç–∞
      Currency: {
        select: {
          name: currency || "USD",
        },
      },
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
      AdditionalInfo: {
        rich_text: [
          {
            type: "text",
            text: { content: additionalInfo || "–ù–µ —É–∫–∞–∑–∞–Ω–æ" },
          },
        ],
      },
      // –°—Å—ã–ª–∫–∞ –Ω–∞ –≥–æ—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ (–ø—É—Å—Ç–æ–µ –ø–æ–ª–µ –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
      VideoLink: {
        url: null, // –ü—É—Å—Ç–∞—è —Å—Å—ã–ª–∫–∞, –±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –ø–æ–∑–∂–µ
      },
      // –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã
      PaymentStatus: {
        select: {
          name: paymentStatus,
        },
      },
      // –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
      Status: {
        select: {
          name: "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ",
        },
      },
      // –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
      Created: {
        date: {
          start: new Date().toISOString(),
        },
      },
    };

    const response = await notion.pages.create({
      parent: {
        database_id: config.NOTION.DATABASE_ID,
      },
      properties: properties,
    });

    console.log("‚úÖ Notion task created successfully, page ID:", response.id);
    return response;
  } catch (error) {
    console.error("‚ùå Notion API error:", error);
    throw new Error(`Notion error: ${error.message}`);
  }
}

export async function queryCompletedOrdersWithLinks() {
  try {
    console.log("üîç Querying database for completed orders with links...");

    const response = await notion.dataSources.query({
      data_source_id: config.NOTION.DATASOURCE_ID, // –∏–ª–∏ –≤–∞—à database_id
      filter: {
        and: [
          {
            // –§–∏–ª—å—Ç—Ä –ø–æ –Ω–∞–ª–∏—á–∏—é —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∏–¥–µ–æ
            property: "VideoLink",
            url: {
              is_not_empty: true,
            },
          },
          {
            // –§–∏–ª—å—Ç—Ä –ø–æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—é –æ—Ç–º–µ—Ç–∫–∏ –æ–± –æ—Ç–ø—Ä–∞–≤–∫–µ (–µ—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–∫–æ–µ –ø–æ–ª–µ)
            property: "NotificationSent",
            checkbox: {
              equals: false,
            },
          },
        ],
      },
      // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
      sorts: [
        {
          property: "Created",
          direction: "descending",
        },
      ],
    });

    console.log(
      `‚úÖ Found ${response.results.length} completed orders with links`
    );
    return response.results;
  } catch (error) {
    console.error("‚ùå Error querying database:", error);
    throw error;
  }
}

// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –¥—Ä—É–≥–∏–º–∏ –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
export async function queryOrdersWithCustomFilters() {
  try {
    console.log("üîç Querying database with custom filters...");

    const response = await notion.databases.query({
      database_id: config.NOTION.DATABASE_ID,
      filter: {
        or: [
          {
            // –í–∞—Ä–∏–∞–Ω—Ç 1: –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã —Å —Å—Å—ã–ª–∫–∞–º–∏
            and: [
              {
                property: "Status",
                select: {
                  equals: "–ó–∞–≤–µ—Ä—à–µ–Ω–æ",
                },
              },
              {
                property: "VideoLink",
                url: {
                  is_not_empty: true,
                },
              },
            ],
          },
          {
            // –í–∞—Ä–∏–∞–Ω—Ç 2: –ò–ª–∏ –∑–∞–∫–∞–∑—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–ì–æ—Ç–æ–≤–æ"
            and: [
              {
                property: "Status",
                select: {
                  equals: "–ì–æ—Ç–æ–≤–æ",
                },
              },
              {
                property: "VideoLink",
                url: {
                  is_not_empty: true,
                },
              },
            ],
          },
        ],
      },
    });

    console.log(`‚úÖ Found ${response.results.length} orders matching filters`);
    return response.results;
  } catch (error) {
    console.error("‚ùå Error querying database:", error);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
export async function sendLinkToUser(bot, userId, orderNumber, videoLink) {
  try {
    await bot.telegram.sendMessage(
      userId,
      `üéâ *–í–∞—à –∑–∞–∫–∞–∑ –≥–æ—Ç–æ–≤!*\n\n` +
        `üî¢ –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: #${orderNumber}\n` +
        `üìπ –°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ: ${videoLink}\n\n` +
        `–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –Ω–∞—à–∏–º–∏ —É—Å–ª—É–≥–∞–º–∏! ‚ú®`,
      { parse_mode: "Markdown" }
    );

    console.log(`‚úÖ Link sent to user ${userId} for order ${orderNumber}`);
    return true;
  } catch (error) {
    console.error(`‚ùå Error sending link to user ${userId}:`, error);
    return false;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Å—ã–ª–æ–∫
export async function processAndSendLinks(bot) {
  try {
    console.log("üîÑ Processing and sending links...");

    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã —Å —Å—Å—ã–ª–∫–∞–º–∏
    const completedOrders = await queryCompletedOrdersWithLinks();

    let sentCount = 0;
    let errorCount = 0;

    for (const order of completedOrders) {
      try {
        const videoLink = order.properties.VideoLink?.url;
        const userId = extractUserIdFromOrder(order);
        const orderNumber = extractOrderNumberFromOrder(order);

        console.log(`üì¶ Processing order ${orderNumber}:`, {
          videoLink,
          userId,
          hasVideoLink: !!videoLink,
          hasUserId: !!userId,
        });

        if (videoLink && userId) {
          const sent = await sendLinkToUser(
            bot,
            userId,
            orderNumber,
            videoLink
          );

          if (sent) {
            // –ü–æ–º–µ—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
            await markNotificationAsSent(order.id);
            sentCount++;
          } else {
            errorCount++;
          }
        } else {
          console.log("‚ö†Ô∏è Missing data for order:", orderNumber);
          errorCount++;
        }
      } catch (error) {
        console.error(`‚ùå Error processing order:`, error);
        errorCount++;
      }
    }

    console.log(`üìä Results: ${sentCount} sent, ${errorCount} errors`);
    return { sent: sentCount, errors: errorCount };
  } catch (error) {
    console.error("‚ùå Error in processAndSendLinks:", error);
    throw error;
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
function extractUserIdFromOrder(order) {
  try {
    const possibleFields = ["userID", "User", "TelegramID", "UserId", "Telegram ID"];

    for (const field of possibleFields) {
      const property = order.properties[field];
      if (!property) continue;

      let value = null;

      switch (property.type) {
        case "rich_text":
          value = property.rich_text?.[0]?.text?.content;
          break;
        case "number":
          value = property.number?.toString();
          break;
        case "title":
          value = property.title?.[0]?.text?.content;
          break;
        default:
          continue;
      }

      if (!value) continue;

      // –°—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ Telegram ID (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞, –º–∏–Ω–∏–º—É–º 5 —Ü–∏—Ñ—Ä)
      const telegramIdMatch = value.toString().match(/^\d{5,}$/);
      if (telegramIdMatch) {
        return telegramIdMatch[0];
      }

      // –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å –∏–∑ —Ç–µ–∫—Å—Ç–∞
      const extractedNumber = extractNumericValue(value);
      if (extractedNumber && extractedNumber.length >= 5) {
        return extractedNumber;
      }
    }
    
    return null;
  } catch (error) {
    console.error("Error extracting user ID:", error);
    return null;
  }
}

function extractOrderNumberFromOrder(order) {
  try {
    // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞
    const possibleFields = ["OrderNumber", "Order", "Number", "Name"];

    for (const field of possibleFields) {
      const property = order.properties[field];
      if (property) {
        if (
          property.type === "rich_text" &&
          property.rich_text?.[0]?.text?.content
        ) {
          return property.rich_text[0].text.content;
        }
        if (property.type === "number") {
          return property.number?.toString();
        }
        if (property.type === "title" && property.title?.[0]?.text?.content) {
          return property.title[0].text.content;
        }
      }
    }
    return "Unknown";
  } catch (error) {
    console.error("Error extracting order number:", error);
    return "Unknown";
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ
async function markNotificationAsSent(pageId) {
  try {
    await notion.pages.update({
      page_id: pageId,
      properties: {
        NotificationSent: {
          checkbox: true,
        },
        Created: {
          date: {
            start: new Date().toISOString(),
          },
        },
      },
    });
    console.log(`‚úÖ Notification marked as sent for page ${pageId}`);
  } catch (error) {
    console.error(`‚ùå Error marking notification as sent:`, error);
  }
}
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
export async function testFilters() {
  try {
    console.log("üß™ Testing filters...");

    // –¢–µ—Å—Ç 1: –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã —Å —Å—Å—ã–ª–∫–∞–º–∏
    const completedWithLinks = await queryCompletedOrdersWithLinks();
    console.log(`‚úÖ Completed with links: ${completedWithLinks.length}`);

    // –¢–µ—Å—Ç 2: –í—Å–µ –∑–∞–∫–∞–∑—ã (–±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤)
    const allOrders = await notion.dataSources.query({
      data_source_id: config.NOTION.DATASOURCE_ID,
      page_size: 5,
    });
    console.log(`‚úÖ Total orders in DB: ${allOrders.results.length}`);

    return {
      completedWithLinks: completedWithLinks.length,
      totalOrders: allOrders.results.length,
    };
  } catch (error) {
    console.error("‚ùå Error testing filters:", error);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ –ø–æ ID —Å—Ç—Ä–∞–Ω–∏—Ü—ã
export async function getNotionPage(pageId) {
  try {
    const response = await notion.pages.retrieve({
      page_id: pageId,
    });

    return response;
  } catch (error) {
    console.error("‚ùå Error retrieving Notion page:", error);
    throw new Error(`Notion retrieve error: ${error.message}`);
  }
}

// –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
export async function queryDataSource() {
  try {
    console.log("üîç Querying database...");

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const databaseInfo = await notion.databases.retrieve({
      database_id: databaseId,
    });

    console.log("üìä Database title:", databaseInfo.title?.[0]?.plain_text);

    // –ó–ê–ú–ï–ù–ò–õ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ - –∏—Å–ø–æ–ª—å–∑—É–µ–º search –∏–ª–∏ –Ω–∞–ø—Ä—è–º—É—é –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const response = await notion.search({
      filter: {
        property: "object",
        value: "page",
      },
      sort: {
        direction: "descending",
        timestamp: "last_edited_time",
      },
    });

    console.log(`üìÑ Found ${response.results.length} pages`);

    // –ï—Å–ª–∏ search –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±
    if (response.results.length === 0) {
      console.log("‚ö†Ô∏è No pages found via search, trying alternative method...");

      // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —á–µ—Ä–µ–∑ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      const dbResponse = await notion.databases.query({
        database_id: databaseId,
      });

      return await processPagesData(dbResponse.results);
    }

    return await processPagesData(response.results);
  } catch (error) {
    console.error("‚ùå Error querying database:", error);

    // –ï—Å–ª–∏ search –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º dataSources.query (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –∫–æ–¥–µ)
    try {
      console.log("üîÑ Trying dataSources.query as fallback...");
      const lastOrder = await notion.dataSources.query({
        data_source_id: dataSourceId,
      });

      return await processPagesData(lastOrder.results);
    } catch (fallbackError) {
      console.error("‚ùå Fallback method also failed:", fallbackError);
      throw error;
    }
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
export async function processPagesData(pages) {
  const allPagesData = pages.map((page, index) => {
    console.log(`\n=== Page ${index + 1} ===`);
    console.log("ID:", page.id);

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    const validationData = extractDataForValidation(page);

    if (validationData) {
      console.log("üìã Extracted properties:");
      Object.entries(validationData.properties).forEach(([key, value]) => {
        console.log(`- ${key}: ${value.value} (${value.type})`);
      });
    }

    return validationData;
  });

  return pages.length > 0 ? pages[0].properties : null;
}

// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã
export async function getDatabaseData() {
  try {
    // –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const response = await notion.databases.query({
      database_id: databaseId,
    });

    console.log(`üìä Found ${response.results.length} pages in database`);

    const formattedData = response.results.map((page) => {
      const validationData = extractDataForValidation(page);

      return {
        id: page.id,
        created: new Date(page.created_time).toLocaleString("ru-RU"),
        url: page.url,
        order: getPropertyValue(page.properties?.Order),
        quantity: getPropertyValue(page.properties?.quantity),
        geo: getPropertyValue(page.properties?.Geo),
        bank: getPropertyValue(page.properties?.Bank),
        status: getPropertyValue(page.properties?.Status),
        validationData: validationData,
      };
    });

    return formattedData;
  } catch (error) {
    console.error("‚ùå Error getting database data:", error);
    return [];
  }
}

export async function queryDataSourceOriginal() {
  try {
    console.log("üîç Querying data source (original method)...");

    const lastOrder = await notion.dataSources.query({
      data_source_id: dataSourceId,
    });

    console.log(`üìÑ Found ${lastOrder.results.length} pages`);

    const allResults = [];

    lastOrder.results.forEach((page, index) => {
      const pageData = {
        id: page.id,
        properties: {},
      };

      // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–≤–æ–π—Å—Ç–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      Object.keys(page.properties).forEach((prop) => {
        const property = page.properties[prop];
        const value = getPropertyValue(property);
        pageData.properties[prop] = {
          value: value,
          type: property.type,
        };
      });

      allResults.push(pageData);
    });

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    return allResults;
  } catch (error) {
    console.error("‚ùå Error in queryDataSourceOriginal:", error);
    throw error;
  }
}
