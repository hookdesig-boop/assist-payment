import { Client } from '@notionhq/client';
import config from '../../config/config.js';

const notion = new Client({
  auth: config.NOTION.API_KEY,
});

// 1. –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
export async function analyzeDatabaseStructure() {
  try {
    const databaseId = config.NOTION.DATABASE_ID || '27a4571881fb807894a8f467b6e408a4';
    console.log('üîç Analyzing database structure...');
    
    const response = await notion.dataSources.retrieve({ data_source_id: config.NOTION.DATASOURCE_ID });
    
    console.log('üìä Database structure:');
    console.log('üîπ Database ID:', response.id);
    console.log('üîπ Database Name:', response.title[0]?.text?.content || 'No title');
    console.log('üîπ URL:', response.url);

    // –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –ø–æ–ª–µ–π
    console.log('\nüìã Properties (fields):');
    const properties = {};
    
    Object.entries(response.properties).forEach(([propertyName, propertyConfig]) => {
      console.log(`\nüî∏ Property: "${propertyName}"`);
      console.log(`   Type: ${propertyConfig.type}`);
      
      properties[propertyName] = {
        type: propertyConfig.type,
        config: propertyConfig
      };

      switch (propertyConfig.type) {
        case 'select':
          if (propertyConfig.select?.options) {
            console.log('   Options:', propertyConfig.select.options.map(opt => opt.name));
            properties[propertyName].options = propertyConfig.select.options.map(opt => opt.name);
          }
          break;
          
        case 'status':
          if (propertyConfig.status?.options) {
            console.log('   Status options:', propertyConfig.status.options.map(opt => opt.name));
            properties[propertyName].options = propertyConfig.status.options.map(opt => opt.name);
          }
          break;
          
        case 'multi_select':
          if (propertyConfig.multi_select?.options) {
            console.log('   Options:', propertyConfig.multi_select.options.map(opt => opt.name));
            properties[propertyName].options = propertyConfig.multi_select.options.map(opt => opt.name);
          }
          break;
      }
    });

    // –ü–æ–∏—Å–∫ –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–ª–µ–π
    const keyFields = {
      status: findFieldByKeywords(response.properties, ['status', '—Å—Ç–∞—Ç—É—Å', 'state']),
      videoLink: findFieldByKeywords(response.properties, ['videolink', 'video', 'link', '—Å—Å—ã–ª–∫–∞', '–≤–∏–¥–µ–æ']),
      userID: findFieldByKeywords(response.properties, ['userid', 'user', 'telegram', 'id']),
      orderNumber: findFieldByKeywords(response.properties, ['ordernumber', 'order', 'number', '–Ω–æ–º–µ—Ä']),
      notification: findFieldByKeywords(response.properties, ['notification', 'sent', '—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ'])
    };

    console.log('\nüéØ Key fields identified:');
    Object.entries(keyFields).forEach(([fieldType, fieldName]) => {
      console.log(`   ${fieldType}: ${fieldName || 'Not found'}`);
    });

    return {
      databaseInfo: response,
      properties,
      keyFields
    };

  } catch (error) {
    console.error('‚ùå Error analyzing database:', error);
    throw error;
  }
}

// 2. –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª–µ–π –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
function findFieldByKeywords(properties, keywords) {
  const propertyNames = Object.keys(properties);
  
  for (const keyword of keywords) {
    const found = propertyNames.find(name => 
      name.toLowerCase().includes(keyword.toLowerCase())
    );
    if (found) return found;
  }
  
  return null;
}

// 3. –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–¥–∞–Ω–∏–π —Å —Å—Å—ã–ª–∫–∞–º–∏
export async function findOrdersWithLinks() {
  try {
    console.log('üîç Searching for orders with links...');
    
    const analysis = await analyzeDatabaseStructure();
    const { keyFields, properties } = analysis;
    
    // –°—Ç—Ä–æ–∏–º —Ñ–∏–ª—å—Ç—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π
    const filters = [];
    
    // –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É (–µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω)
    if (keyFields.status) {
      const statusField = properties[keyFields.status];
      const completedStatus = findCompletedStatus(statusField.options);
      
      if (completedStatus) {
        filters.push({
          property: keyFields.status,
          [statusField.type]: {
            equals: completedStatus
          }
        });
      }
    }
    
    // –§–∏–ª—å—Ç—Ä –ø–æ –Ω–∞–ª–∏—á–∏—é —Å—Å—ã–ª–∫–∏ (–µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω)
    if (keyFields.videoLink) {
      filters.push({
        property: keyFields.videoLink,
        url: {
          is_not_empty: true
        }
      });
    }
    
    // –§–∏–ª—å—Ç—Ä –ø–æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—é –æ—Ç–º–µ—Ç–∫–∏ –æ–± –æ—Ç–ø—Ä–∞–≤–∫–µ (–µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω)
    if (keyFields.notification) {
      const notificationField = properties[keyFields.notification];
      if (notificationField.type === 'checkbox') {
        filters.push({
          property: keyFields.notification,
          checkbox: {
            equals: false
          }
        });
      }
    }
    
    console.log('üéØ Applying filters:', filters);
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
    const response = await notion.dataSources.query({
      data_source_id: config.NOTION.DATASOURCE_ID || '27a4571881fb807894a8f467b6e408a4',
      filter: filters.length > 1 ? { and: filters } : filters[0],
      sorts: [
        {
          timestamp: 'last_edited_time',
          direction: 'descending'
        }
      ]
    });

    console.log(`‚úÖ Found ${response.results.length} orders with links`);
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const orders = response.results.map(order => ({
      id: order.id,
      videoLink: extractPropertyValue(order, keyFields.videoLink),
      userId: extractPropertyValue(order, keyFields.userID),
      orderNumber: extractPropertyValue(order, keyFields.orderNumber),
      status: extractPropertyValue(order, keyFields.status),
      properties: order.properties
    }));

    return {
      analysis,
      orders,
      total: response.results.length
    };

  } catch (error) {
    console.error('‚ùå Error finding orders with links:', error);
    throw error;
  }
}

// 4. –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ "–∑–∞–≤–µ—Ä—à–µ–Ω–æ"
function findCompletedStatus(options) {
  if (!options) return null;
  
  const completedKeywords = ['done', 'completed', 'finished', '–≥–æ—Ç–æ–≤–æ', '–∑–∞–≤–µ—Ä—à–µ–Ω–æ', '–≤—ã–ø–æ–ª–Ω–µ–Ω–æ'];
  
  for (const keyword of completedKeywords) {
    const found = options.find(option => 
      option.toLowerCase().includes(keyword.toLowerCase())
    );
    if (found) return found;
  }
  
  return options[0]; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π —Å—Ç–∞—Ç—É—Å, –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π
}

// 5. –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è —Å–≤–æ–π—Å—Ç–≤–∞
function extractPropertyValue(order, propertyName) {
  if (!propertyName || !order.properties[propertyName]) {
    return null;
  }
  
  const property = order.properties[propertyName];
  
  switch (property.type) {
    case 'rich_text':
      return property.rich_text?.[0]?.text?.content || null;
      
    case 'title':
      return property.title?.[0]?.text?.content || null;
      
    case 'number':
      return property.number?.toString() || null;
      
    case 'url':
      return property.url || null;
      
    case 'select':
      return property.select?.name || null;
      
    case 'status':
      return property.status?.name || null;
      
    case 'checkbox':
      return property.checkbox ? 'true' : 'false';
      
    default:
      return null;
  }
}

// 6. –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
export async function sendLinkToUser(bot, userId, orderNumber, videoLink) {
  try {
    if (!userId) {
      console.log('‚ùå No user ID provided');
      return false;
    }
    
    await bot.telegram.sendMessage(
      userId,
      `üéâ *–í–∞—à –∑–∞–∫–∞–∑ –≥–æ—Ç–æ–≤!*\n\n` +
      `üî¢ –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: #${orderNumber}\n` +
      `üìπ –°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ: ${videoLink}\n\n` +
      `–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –Ω–∞—à–∏–º–∏ —É—Å–ª—É–≥–∞–º–∏! ‚ú®`,
      { parse_mode: 'Markdown' }
    );
    
    console.log(`‚úÖ Link sent to user ${userId} for order ${orderNumber}`);
    return true;
    
  } catch (error) {
    if (error.response?.error_code === 403) {
      console.log(`‚ùå User ${userId} has blocked the bot`);
    } else if (error.response?.error_code === 400) {
      console.log(`‚ùå Invalid user ID: ${userId}`);
    } else {
      console.error(`‚ùå Error sending to user ${userId}:`, error.message);
    }
    return false;
  }
}

// 7. –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
export async function processAndSendLinks(bot) {
  try {
    console.log('üöÄ Starting link processing...');
    
    const result = await findOrdersWithLinks();
    const { orders, analysis } = result;
    
    console.log(`üìã Processing ${orders.length} orders...`);
    
    let sentCount = 0;
    let errorCount = 0;
    const results = [];

    for (const order of orders) {
      try {
        console.log(`\nüì¶ Processing order:`, {
          orderNumber: order.orderNumber,
          hasVideoLink: !!order.videoLink,
          hasUserId: !!order.userId
        });

        if (order.videoLink && order.userId) {
          const sent = await sendLinkToUser(bot, order.userId, order.orderNumber, order.videoLink);
          
          if (sent) {
            // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ (–µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª–µ)
            if (analysis.keyFields.notification) {
              await markAsSent(order.id, analysis.keyFields.notification);
            }
            sentCount++;
          } else {
            errorCount++;
          }
          
          results.push({
            orderNumber: order.orderNumber,
            userId: order.userId,
            sent: sent,
            error: !sent
          });
        } else {
          console.log('‚ö†Ô∏è Skipping order - missing data:', {
            orderNumber: order.orderNumber,
            missingVideoLink: !order.videoLink,
            missingUserId: !order.userId
          });
          errorCount++;
        }
      } catch (error) {
        console.error(`‚ùå Error processing order ${order.orderNumber}:`, error);
        errorCount++;
      }
    }

    console.log(`\nüìä Final results: ${sentCount} sent, ${errorCount} errors`);
    
    return {
      total: orders.length,
      sent: sentCount,
      errors: errorCount,
      results,
      analysis: analysis.keyFields
    };

  } catch (error) {
    console.error('‚ùå Error in processAndSendLinks:', error);
    throw error;
  }
}

// 8. –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
async function markAsSent(pageId, notificationField) {
  try {
    await notion.pages.update({
      page_id: pageId,
      properties: {
        [notificationField]: {
          checkbox: true
        }
      }
    });
    console.log(`‚úÖ Marked as sent: ${pageId}`);
  } catch (error) {
    console.error(`‚ùå Error marking as sent:`, error);
  }
}

// 9. –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –±–æ—Ç–∞
export function setupBotCommands(bot) {
  // –ê–Ω–∞–ª–∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  bot.command('analyze_db', async (ctx) => {
    try {
      await ctx.reply('üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
      const analysis = await analyzeDatabaseStructure();
      
      let message = `üìä *–ê–Ω–∞–ª–∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:*\n\n`;
      message += `üè∑Ô∏è *–ù–∞–∑–≤–∞–Ω–∏–µ:* ${analysis.databaseInfo.title[0]?.text?.content || '–ù–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è'}\n`;
      message += `üîó *URL:* ${analysis.databaseInfo.url}\n\n`;
      message += `üéØ *–ö–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è:*\n`;
      
      Object.entries(analysis.keyFields).forEach(([field, name]) => {
        message += `‚Ä¢ ${field}: ${name || '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ'}\n`;
      });
      
      await ctx.reply(message, { parse_mode: 'Markdown' });
    } catch (error) {
      await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: ${error.message}`);
    }
  });

  // –ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–æ–≤ —Å —Å—Å—ã–ª–∫–∞–º–∏
  bot.command('find_links', async (ctx) => {
    try {
      await ctx.reply('üîç –ò—â—É –∑–∞–∫–∞–∑—ã —Å–æ —Å—Å—ã–ª–∫–∞–º–∏...');
      const result = await findOrdersWithLinks();
      
      let message = `üìã *–ù–∞–π–¥–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: ${result.total}*\n\n`;
      
      result.orders.forEach(order => {
        message += `üî¢ *–ó–∞–∫–∞–∑ #${order.orderNumber || 'N/A'}*\n`;
        message += `üë§ User: ${order.userId || '‚ùå –ù–µ—Ç ID'}\n`;
        message += `üîó –°—Å—ã–ª–∫–∞: ${order.videoLink ? '‚úÖ –ï—Å—Ç—å' : '‚ùå –ù–µ—Ç'}\n`;
        message += `üìä –°—Ç–∞—Ç—É—Å: ${order.status || 'N/A'}\n\n`;
      });
      
      await ctx.reply(message, { parse_mode: 'Markdown' });
    } catch (error) {
      await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: ${error.message}`);
    }
  });

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Å—ã–ª–æ–∫
  bot.command('send_links', async (ctx) => {
    try {
      await ctx.reply('üöÄ –ó–∞–ø—É—Å–∫–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É —Å—Å—ã–ª–æ–∫...');
      const result = await processAndSendLinks(bot);
      
      let message = `üìä *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–∫–∏:*\n\n`;
      message += `‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${result.sent}\n`;
      message += `‚ùå –û—à–∏–±–æ–∫: ${result.errors}\n`;
      message += `üìã –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${result.total}\n\n`;
      message += `üéØ *–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø–æ–ª—è:*\n`;
      
      Object.entries(result.analysis).forEach(([field, name]) => {
        message += `‚Ä¢ ${field}: ${name || '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ'}\n`;
      });
      
      await ctx.reply(message, { parse_mode: 'Markdown' });
    } catch (error) {
      await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ${error.message}`);
    }
  });
}