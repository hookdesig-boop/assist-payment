const { Telegraf, Markup } = require("telegraf");

require("dotenv").config();

const bot = new Telegraf(process.env.BOT_TOKEN);
console.log(process.env.BOT_TOKEN ? "Token - ‚úÖ" : "‚ùå");

const price = process.env.PRODUCT_PRICE;

const orderSession = new Map();

const LOCALIZATION_OPTIONS = [
  "üá∫üá∏ –°–®–ê (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π)",
  "üá∫üá¶ –£–∫—Ä–∞–∏–Ω–∞ (—É–∫—Ä–∞–∏–Ω—Å–∫–∏–π)",
  "üá∑üá∫ –†–æ—Å—Å–∏—è (—Ä—É—Å—Å–∫–∏–π)",
  "üá©üá™ –ì–µ—Ä–º–∞–Ω–∏—è (–Ω–µ–º–µ—Ü–∫–∏–π)",
  "üá´üá∑ –§—Ä–∞–Ω—Ü–∏—è (—Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π)",
  "üá®üá≥ –ö–∏—Ç–∞–π (–∫–∏—Ç–∞–π—Å–∫–∏–π)",
  "üåç –î—Ä—É–≥–æ–µ (—É—Ç–æ—á–Ω–∏—Ç—å –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏)",
];

bot.start(async (ctx) => {
  console.log(`User start ${ctx.from.id}`);
  await ctx.reply(
    `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –ø–æ–º–æ–≥—É –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –∏ –æ–ø–ª–∞—Ç–∏—Ç—å –µ–≥–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π.\n\n` +
      `üìã –î–ª—è –Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞:`,
    Markup.removeKeyboard()
  );
});

bot.on("text", async (ctx) => {
  const userId = ctx.from.id;
  const text = ctx.message.text.trim();
  if (orderSession.has(userId)) {
    await handleOrderStage(ctx);
    return;
  }

  if (/^[A-Z0-9]{3,20}$/i.test(text)) {
    orderSession.set(userId, {
      stage: "bank",
      orderNumber: text,
      createdAt: new Date(),
    });
  }
});

console.log(orderSession)

async function handleLocalizationStage(ctx, session, localizationText) {
  if (!LOCALIZATION_OPTIONS.includes(localizationText)) {
    await ctx.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö:");
    return;
  }

  session.localization = localizationText;
  session.stage = "inscription";

  await ctx.reply(
    `üåç –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è: ${localizationText}\n\n` +
      `‚û°Ô∏è –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞–¥–ø–∏—Å–∏ –Ω–∞ —Ç–æ–≤–∞—Ä–µ:\n` +
      `(–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "–Ω–µ—Ç" –µ—Å–ª–∏ –Ω–∞–¥–ø–∏—Å—å –Ω–µ –Ω—É–∂–Ω–∞)`,
    Markup.removeKeyboard()
  );
}

async function handleBankStage(ctx, session, bankText) {
  if (bankText.trim().length < 2) {
    await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞:');
    return;
  }

  session.bank = bankText;
  session.stage = 'prize';

  await ctx.reply(
    `üè¶ –ë–∞–Ω–∫: ${bankText}\n\n` +
    `‚û°Ô∏è –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤–∞—à–µ–≥–æ –≤—ã–∏–≥—Ä—ã—à–∞ –≤ USD:\n` +
    `(—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä: 1000)`,
    Markup.removeKeyboard()
  );
}


async function handleOrderStage(ctx) {
  const userId = ctx.from.id;
  const session = orderSession.get(userId);
  const text = ctx.message.text.trim();

  console.log("üîÑ Handling stage:", session.stage, "for user:", userId);

  switch (session.stage) {
    case "bank":
      await handleBankStage(ctx, session, text);
      break;
    case "prize":
      await handlePrizeStage(ctx, session, text);
      break;
    case "quantity":
      await handleQuantityStage(ctx, session, text);
      break;
    case "localization":
      await handleLocalizationStage(ctx, session, text);
      break;
    case "inscription":
      await handleInscriptionStage(ctx, session, text);
      break;
    case "details":
      await handleDetailsStage(ctx, session, text);
      break;
  }
}

async function handlePrizeStage(ctx, session, prizeText) {
  const prizeAmount = parseFloat(prizeText.replace(',', '.'));
  
  if (isNaN(prizeAmount) || prizeAmount <= 0 || prizeAmount > 1000000) {
    await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –≤—ã–∏–≥—Ä—ã—à–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1000):');
    return;
  }

  session.prizeAmount = prizeAmount;
  session.stage = 'quantity';

  await ctx.reply(
    `üéâ –°—É–º–º–∞ –≤—ã–∏–≥—Ä—ã—à–∞: $${prizeAmount}\n\n` +
    `‚û°Ô∏è –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:`,
    Markup.keyboard([['1', '2', '3'], ['4', '5', '10']]).resize()
  );
}
async function handleQuantityStage(ctx, session, quantityText) {
  const quantity = parseInt(quantityText);
  
  if (isNaN(quantity) || quantity < 1 || quantity > 100) {
    await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (1-100):');
    return;
  }

  session.quantity = quantity;
  session.totalAmount = quantity * price;
  session.stage = 'localization';

  await ctx.reply(
    `üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${quantity} —à—Ç.\n` +
    `üí∞ –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: $${session.totalAmount}\n\n` +
    `‚û°Ô∏è –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—é —Ç–æ–≤–∞—Ä–∞:`,
    Markup.keyboard([LOCALIZATION_OPTIONS.slice(0, 3), LOCALIZATION_OPTIONS.slice(3, 6), [LOCALIZATION_OPTIONS[6]]]).resize()
  );
}

async function handleLocalizationStage(ctx, session, localizationText) {
  if (!LOCALIZATION_OPTIONS.includes(localizationText)) {
    await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö:');
    return;
  }

  session.localization = localizationText;
  session.stage = 'inscription';

  await ctx.reply(
    `üåç –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è: ${localizationText}\n\n` +
    `‚û°Ô∏è –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞–¥–ø–∏—Å–∏ –Ω–∞ —Ç–æ–≤–∞—Ä–µ:\n` +
    `(–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "–Ω–µ—Ç" –µ—Å–ª–∏ –Ω–∞–¥–ø–∏—Å—å –Ω–µ –Ω—É–∂–Ω–∞)`,
    Markup.removeKeyboard()
  );
}
async function handleInscriptionStage(ctx, session, inscriptionText) {
  if (inscriptionText.toLowerCase() !== '–Ω–µ—Ç' && inscriptionText.trim() !== '') {
    session.inscription = inscriptionText;
  } else {
    session.inscription = '–ë–µ–∑ –Ω–∞–¥–ø–∏—Å–∏';
  }

  session.stage = 'details';

  await ctx.reply(
    `üî§ –ù–∞–¥–ø–∏—Å—å: ${session.inscription}\n\n` +
    `‚û°Ô∏è –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –∏–ª–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è:\n` +
    `(–Ω–∞–ø—Ä–∏–º–µ—Ä: —Ü–≤–µ—Ç, —Ä–∞–∑–º–µ—Ä, —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ —Ç.–¥.)`,
    Markup.removeKeyboard()
  );
}

async function handleDetailsStage(ctx, session, detailsText) {
  if (detailsText.trim().length < 2) {
    await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞):');
    return;
  }

  session.details = detailsText;
  session.stage = 'confirmation';

  await ctx.replyWithHTML(
    `üìã <b>–ò—Ç–æ–≥–∏ –∑–∞–∫–∞–∑–∞ #${session.orderNumber}</b>\n\n` +
    `üè¶ –ë–∞–Ω–∫: ${session.bank}\n` +
    `üéâ –°—É–º–º–∞ –≤—ã–∏–≥—Ä—ã—à–∞: $${session.prizeAmount}\n` +
    `üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${session.quantity} —à—Ç.\n` +
    `üåç –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è: ${session.localization}\n` +
    `üî§ –ù–∞–¥–ø–∏—Å—å: ${session.inscription}\n` +
    `üí∞ –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: <b>$${session.totalAmount} USDT</b>\n` +
    `üìù –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: ${session.details}\n\n` +
    `‚û°Ô∏è –í—Å—ë –≤–µ—Ä–Ω–æ? –°–æ–∑–¥–∞—Ç—å –∏–Ω–≤–æ–π—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã?`,
    Markup.inlineKeyboard([
      [Markup.button.callback('‚úÖ –î–∞, —Å–æ–∑–¥–∞—Ç—å –∏–Ω–≤–æ–π—Å', 'confirm_invoice')],
      [Markup.button.callback('‚ùå –ù–µ—Ç, –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ', 'cancel_order')]
    ])
  );
}

bot
  .launch()
  .then(() => {
    console.log("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏!");
    //   console.log('üí° –¢–µ—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã:');
    //   console.log('   /test_notion - –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ Notion');
    //   console.log('   /simulate - –ü–æ–ª–Ω–∞—è –∏–º–∏—Ç–∞—Ü–∏—è –∑–∞–∫–∞–∑–∞');
    //   console.log('   /test_direct - –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏');
    //   console.log('   /test_connection - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π');
  })
  .catch((error) => {
    console.log("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:", error.message);
  });

process.once("SIGINT", () => bot.stop("SIGINT"));
process.once("SIGTERM", () => bot.stop("SIGTERM"));
