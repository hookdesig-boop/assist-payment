import { Telegraf, session, Markup } from "telegraf";
import config from "./config/config.js";
import { createNotionTask, processAndSendLinks } from "./src/utils/notion.js";
import { setupBotCommands } from "./src/components/notionNotifier.js";
import { CryptoBotService } from "./src/utils/cryptoBot.js";
import { localization } from "./src/utils/localization.js";
import { currency } from "./src/utils/currencys.js";
import EnhancedActivityManager from "./src/utils/active.js";

const bot = new Telegraf(config.TELEGRAM_BOT_TOKEN);
const cryptoBot = new CryptoBotService(bot);
const activityManager = new EnhancedActivityManager(bot);

// –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Å—Å–∏–∏
bot.use(session());

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è pending –ø–ª–∞—Ç–µ–∂–µ–π
const pendingPayments = new Map();

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
global.paymentCheckInterval = null;
global.autoCheckInterval = null;

// ========== –£–¢–ò–õ–ò–¢–´ –î–õ–Ø –û–¢–õ–ê–î–ö–ò ==========

function debugSession(ctx) {
  console.log('üîç DEBUG SESSION:', {
    userId: ctx.from?.id,
    session: ctx.session,
    invoiceId: ctx.session?.invoiceId,
    pendingPaymentsSize: pendingPayments.size,
    pendingPayments: Array.from(pendingPayments.entries()).map(([id, data]) => ({
      invoiceId: id,
      userId: data.userId,
      orderNumber: data.order?.orderNumber
    }))
  });
}

// ========== –°–ò–°–¢–ï–ú–ê –ü–†–û–í–ï–†–ö–ò –ü–õ–ê–¢–ï–ñ–ï–ô ==========

function savePendingPayment(invoiceId, paymentData) {
  pendingPayments.set(invoiceId, {
    ...paymentData,
    createdAt: new Date(),
    checkedAt: null,
    attempts: 0,
  });
  console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω pending –ø–ª–∞—Ç–µ–∂: ${invoiceId}`);
}

function getPendingPayment(invoiceId) {
  return pendingPayments.get(invoiceId);
}

function removePendingPayment(invoiceId) {
  pendingPayments.delete(invoiceId);
  console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω pending –ø–ª–∞—Ç–µ–∂: ${invoiceId}`);
}

async function checkPendingPayments() {
  try {
    if (pendingPayments.size === 0) return;

    console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ ${pendingPayments.size} pending –ø–ª–∞—Ç–µ–∂–µ–π...`);

    for (const [invoiceId, paymentData] of pendingPayments.entries()) {
      try {
        if (
          paymentData.checkedAt &&
          Date.now() - paymentData.checkedAt < 30000
        ) {
          continue;
        }

        paymentData.attempts += 1;
        paymentData.checkedAt = Date.now();

        const paymentStatus = await cryptoBot.checkPaymentStatus(invoiceId);

        if (paymentStatus.status === "paid") {
          console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π –∏–Ω–≤–æ–π—Å: ${invoiceId}`);
          await processSuccessfulPayment(invoiceId, paymentData);
        } else if (
          paymentStatus.status === "expired" ||
          paymentData.attempts > 12
        ) {
          removePendingPayment(invoiceId);
        }
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω–≤–æ–π—Å–∞ ${invoiceId}:`, error);
      }
    }
  } catch (error) {
    console.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ checkPendingPayments:", error);
  }
}

async function processSuccessfulPayment(invoiceId, paymentData, retryCount = 0) {
  const maxRetries = 3;
  
  try {
    const { order, invoiceAmount, userId, chatId } = paymentData;

    console.log(`üì§ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ Notion –¥–ª—è –∏–Ω–≤–æ–π—Å–∞ ${invoiceId}, –ø–æ–ø—ã—Ç–∫–∞ ${retryCount + 1}`);

    const notionTask = await createNotionTask({
      orderNumber: order.orderNumber,
      userId: userId,
      adaptationsCount: order.adaptationsCount,
      adaptations: order.adaptations,
      bank: order.bank,
      winningAmount: order.winningAmount,
      additionalInfo: order.additionalInfo,
      paymentStatus: "paid",
      invoiceId: invoiceId,
    });

    if (notionTask && notionTask.id) {
      await bot.telegram.sendMessage(
        chatId,
        `üéâ *–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!*\n\n` +
          `‚úÖ –ó–∞–∫–∞–∑ #${order.orderNumber} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.\n` +
          `üí∞ –°—É–º–º–∞ –æ–ø–ª–∞—Ç—ã: ${invoiceAmount} USDT\n` +
          `üìã ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${invoiceId}\n` +
          `üîó ID –≤ Notion: ${notionTask.id}\n\n` +
          `–ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å –∫–æ–≥–¥–∞ –∞–¥–∞–ø—Ç–∞—Ü–∏—è –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–∞.`,
        { parse_mode: "Markdown" }
      );

      removePendingPayment(invoiceId);
      console.log(`‚úÖ Successfully processed payment ${invoiceId}`);
    } else {
      throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –≤ Notion");
    }

  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ ${invoiceId}:`, error);
    
    if (retryCount < maxRetries) {
      console.log(`üîÑ Retrying payment processing for ${invoiceId}, attempt ${retryCount + 1}`);
      // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
      await new Promise(resolve => setTimeout(resolve, 2000 * (retryCount + 1)));
      return processSuccessfulPayment(invoiceId, paymentData, retryCount + 1);
    } else {
      // –ü–æ—Å–ª–µ –≤—Å–µ—Ö –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
      console.error(`üö® Failed to process payment ${invoiceId} after ${maxRetries} attempts`);
      
      try {
        await bot.telegram.sendMessage(
          paymentData.chatId,
          `‚ùå *–í–Ω–∏–º–∞–Ω–∏–µ!*\n\n` +
            `–û–ø–ª–∞—Ç–∞ –ø–æ —Å—á–µ—Ç—É #${invoiceId} –ø–æ–ª—É—á–µ–Ω–∞, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.\n\n` +
            `‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ:\n` +
            `‚Ä¢ ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${invoiceId}\n` +
            `‚Ä¢ –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: ${paymentData.order.orderNumber}\n\n` +
            `–ú—ã —Ä–µ—à–∏–º –ø—Ä–æ–±–ª–µ–º—É –≤—Ä—É—á–Ω—É—é –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.`,
          { parse_mode: "Markdown" }
        );
      } catch (notificationError) {
        console.error('‚ùå Failed to send error notification:', notificationError);
      }
    }
  }
}

async function handleOrphanedPayment(ctx, invoiceId, paymentStatus) {
  try {
    console.log(`üîÑ Handling orphaned payment: ${invoiceId}`);
    
    // –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
    await ctx.editMessageText(
      "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n" +
      "üîç –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –≤ —Å–∏—Å—Ç–µ–º–µ...\n\n" +
      "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
    );

    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞
    // –ù–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ –ª–æ–≥–æ–≤ –∏–ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    
    // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ - –ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞–Ω–æ–≤–æ
    await ctx.reply(
      "üéâ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n" +
      "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –±—ã–ª–∏ —É—Ç–µ—Ä—è–Ω—ã.\n\n" +
      "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏:"
    );
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —à–∞–≥ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    ctx.session.step = "recovering_order_after_payment";
    ctx.session.paidInvoiceId = invoiceId;
    
  } catch (error) {
    console.error(`‚ùå Error handling orphaned payment ${invoiceId}:`, error);
    
    await ctx.reply(
      "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.\n\n" +
      "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ —ç—Ç–æ—Ç ID:\n" +
      `üìã Invoice ID: ${invoiceId}\n\n` +
      "–ú—ã —Ä–µ—à–∏–º –ø—Ä–æ–±–ª–µ–º—É –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
    );
  }
}

function startPaymentChecking() {
  if (global.paymentCheckInterval) {
    clearInterval(global.paymentCheckInterval);
  }

  global.paymentCheckInterval = setInterval(() => {
    activityManager.recordActivity();
    checkPendingPayments();
  }, 10000);

  console.log("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π –∑–∞–ø—É—â–µ–Ω–∞");
}

function stopPaymentChecking() {
  if (global.paymentCheckInterval) {
    clearInterval(global.paymentCheckInterval);
    global.paymentCheckInterval = null;
    console.log("üõë –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞");
  }
}

// ========== –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò ==========

function startAutoChecking(minutes = 15) {
  if (global.autoCheckInterval) {
    clearInterval(global.autoCheckInterval);
  }

  const intervalMs = minutes * 60 * 1000;

  global.autoCheckInterval = setInterval(async () => {
    activityManager.recordActivity();
    try {
      console.log(`üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–∞–∑–æ–≤...`);
      const result = await processAndSendLinks(bot);
      console.log(
        `üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${result.sent}, –æ—à–∏–±–æ–∫: ${result.errors}`
      );
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–∫–∞–∑–æ–≤:", error);
    }
  }, intervalMs);

  console.log(`‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –∑–∞–ø—É—â–µ–Ω–∞`);
}

function stopAutoChecking() {
  if (global.autoCheckInterval) {
    clearInterval(global.autoCheckInterval);
    global.autoCheckInterval = null;
    console.log("üõë –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞");
  }
}

// –î–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–º–∏
global.stopPaymentChecking = stopPaymentChecking;
global.startPaymentChecking = startPaymentChecking;
global.stopAutoChecking = stopAutoChecking;
global.startAutoChecking = startAutoChecking;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–π
const getLocalizations = localization();

function createCurrencyKeyboard() {
  const currencies = currency;
  const buttons = currencies.map((currency) =>
    Markup.button.callback(currency.name, `currency_${currency.code}`)
  );

  const rows = [];
  for (let i = 0; i < buttons.length; i += 2) {
    rows.push(buttons.slice(i, i + 2));
  }

  return Markup.inlineKeyboard(rows);
}

function createLocalizationsKeyboard() {
  const buttons = getLocalizations.map((loc) =>
    Markup.button.callback(loc.name, `localization_${loc.id}`)
  );

  const rows = [];
  for (let i = 0; i < buttons.length; i += 2) {
    rows.push(buttons.slice(i, i + 2));
  }

  return rows;
}

function calculateOrderPrice(order) {
  const pricePerAdaptation = config.PRICES.ADAPTATION;
  const adaptationsPrice = order.adaptationsCount * pricePerAdaptation;
  return { adaptationsPrice };
}

async function createInvoice(ctx) {
  try {
    const order = ctx.session.order;
    const userId = ctx.from.id;
    const chatId = ctx.chat.id;

    const priceInfo = calculateOrderPrice(order);
    const amount = priceInfo.adaptationsPrice * 1.03;
    const description = `–ó–∞–∫–∞–∑ #${order.orderNumber} - ${order.adaptationsCount} –∞–¥–∞–ø—Ç–∞—Ü–∏–π`;

    console.log(
      `üí∞ Creating invoice for order ${order.orderNumber}, amount: ${amount} USD`
    );

    const invoice = await cryptoBot.createInvoice(
      amount,
      description,
      order.orderNumber
    );

    ctx.session.invoiceId = invoice.invoice_id;
    ctx.session.invoiceAmount = amount;
    ctx.session.payUrl = invoice.pay_url;

    console.log(`‚úÖ Invoice created: ${invoice.invoice_id}`);

    savePendingPayment(invoice.invoice_id, {
      order: { ...order },
      invoiceAmount: amount,
      payUrl: invoice.pay_url,
      userId: userId,
      chatId: chatId,
    });

    await ctx.reply(
      `üí≥ *–°—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É*\n\n` +
        `üìã –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: #${order.orderNumber}\n` +
        `üé¨ –ê–¥–∞–ø—Ç–∞—Ü–∏–π: ${order.adaptationsCount}\n` +
        `üíµ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: ${amount} USDT\n\n` +
        `‚è≥ –°—á–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç\n` +
        `ü§ñ –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n\n` +
        `–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ:`,
      {
        parse_mode: "Markdown",
        ...Markup.inlineKeyboard([
          [Markup.button.url("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π", invoice.pay_url)],
          [Markup.button.callback("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", "check_payment")],
          [Markup.button.callback("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", "cancel_payment")],
        ]),
      }
    );
  } catch (error) {
    console.error("‚ùå Error creating invoice:", error);
    await ctx.reply(
      "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
    );
  }
}

// ========== –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ==========

// –ú–∏–¥–ª–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
bot.use((ctx, next) => {
  activityManager.recordActivity();
  return next();
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.start(async (ctx) => {
  activityManager.recordActivity();
  console.log("üë§ User started:", ctx.from.id);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é
  ctx.session = {
    step: "awaiting_order_number",
    order: {
      adaptations: [],
    },
  };

  await ctx.reply(
    `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –ø–æ–º–æ–≥—É –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –∏ –æ–ø–ª–∞—Ç–∏—Ç—å –µ–≥–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π.\n\n` +
      `üìã –î–ª—è –Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞:\n\n`
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on("text", async (ctx) => {
  activityManager.recordActivity();

  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
  if (ctx.message.text.startsWith("/")) {
    return;
  }

  console.log("üìù Received text:", ctx.message.text);
  console.log("üîç Current step:", ctx.session?.step);

  if (ctx.session?.step === "awaiting_order_number") {
    const orderNumber = ctx.message.text.trim();

    if (!/^\d+$/.test(orderNumber)) {
      await ctx.reply(
        "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):"
      );
      return;
    }

    ctx.session.order.orderNumber = orderNumber;
    ctx.session.step = "selecting_adaptations";

    console.log(`‚úÖ User ${ctx.from.id} entered order number: ${orderNumber}`);

    await ctx.reply(
      `‚úÖ –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: ${orderNumber}\n\n` +
        `üé¨ –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–¥–∞–ø—Ç–∞—Ü–∏–π:`,
      Markup.inlineKeyboard([
        [
          Markup.button.callback("1", "adaptations_1"),
          Markup.button.callback("2", "adaptations_2"),
          Markup.button.callback("3", "adaptations_3"),
        ],
        [
          Markup.button.callback("4", "adaptations_4"),
          Markup.button.callback("5", "adaptations_5"),
          Markup.button.callback("6", "adaptations_6"),
        ],
      ])
    );
    return;
  }

  if (ctx.session?.step === "entering_bank") {
    const bank = ctx.message.text.trim();

    if (bank.length === 0) {
      await ctx.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞:");
      return;
    }

    ctx.session.order.bank = bank;
    ctx.session.step = "entering_winning_amount";

    console.log(`üè¶ User entered bank: ${bank}`);

    await ctx.reply(
      `‚úÖ –ë–∞–Ω–∫: ${bank}\n\n` +
        `üí∞ –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –≤—ã–∏–≥—Ä—ã—à–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):`
    );
    return;
  }

  if (ctx.session?.step === "entering_winning_amount") {
    const winningAmount = parseFloat(ctx.message.text.trim());

    if (isNaN(winningAmount) || winningAmount <= 0) {
      await ctx.reply(
        "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –≤—ã–∏–≥—Ä—ã—à–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –±–æ–ª—å—à–µ 0):"
      );
      return;
    }

    ctx.session.order.winningAmount = winningAmount;
    ctx.session.step = "entering_additional_info";

    console.log(`üí∞ User entered winning amount: ${winningAmount}`);

    await ctx.reply(
      `‚úÖ –°—É–º–º–∞ –≤—ã–∏–≥—Ä—ã—à–∞: ${winningAmount}\n\n` +
        `üìù –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–Ω–µ—Ç", –µ—Å–ª–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è):`
    );
    return;
  }

  if (ctx.session?.step === "entering_additional_info") {
    const additionalInfo = ctx.message.text.trim();
    ctx.session.order.additionalInfo = additionalInfo;

    console.log(`üìù User entered additional info: ${additionalInfo}`);

    await createInvoice(ctx);
    return;
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –∑–∞–ø—Ä–æ—Å–æ–≤
bot.action(/adaptations_(\d+)/, async (ctx) => {
  const adaptationsCount = parseInt(ctx.match[1]);

  ctx.session.order.adaptationsCount = adaptationsCount;
  ctx.session.order.adaptations = [];
  ctx.session.currentAdaptation = 1;
  ctx.session.step = "selecting_localization_for_adaptation";

  console.log(`üé¨ User selected ${adaptationsCount} adaptations`);

  await ctx.editMessageText(
    `üé¨ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–¥–∞–ø—Ç–∞—Ü–∏–π: ${adaptationsCount}\n\n` +
      `üåç –í—ã–±–µ—Ä–∏—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ #1:`,
    Markup.inlineKeyboard(createLocalizationsKeyboard())
  );

  await ctx.answerCbQuery();
});

bot.action(/localization_(\d+)/, async (ctx) => {
  const localizationId = parseInt(ctx.match[1]);
  const currentAdaptation = ctx.session.currentAdaptation;
  const adaptationsCount = ctx.session.order.adaptationsCount;

  const selectedLocalization = getLocalizations.find(
    (loc) => loc.id === localizationId
  );

  if (!selectedLocalization) {
    await ctx.answerCbQuery("‚ùå –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
    return;
  }

  ctx.session.order.adaptations[currentAdaptation - 1] = {
    localization: selectedLocalization.name,
    localizationId: localizationId,
  };

  console.log(`üåç User selected localization: ${selectedLocalization.name}`);

  ctx.session.step = "selecting_currency_for_adaptation";

  await ctx.editMessageText(
    `‚úÖ –ê–¥–∞–ø—Ç–∞—Ü–∏—è #${currentAdaptation}: ${selectedLocalization.name}\n\n` +
      `üí± –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ #${currentAdaptation}:`,
    createCurrencyKeyboard()
  );

  await ctx.answerCbQuery();
});

bot.action(/currency_(.+)/, async (ctx) => {
  const currencyCode = ctx.match[1];
  const currentAdaptation = ctx.session.currentAdaptation;
  const adaptationsCount = ctx.session.order.adaptationsCount;

  if (ctx.session.order.adaptations[currentAdaptation - 1]) {
    ctx.session.order.adaptations[currentAdaptation - 1].currency =
      currencyCode;
  }

  console.log(`üí± User selected currency: ${currencyCode}`);

  if (currentAdaptation < adaptationsCount) {
    ctx.session.currentAdaptation = currentAdaptation + 1;
    ctx.session.step = "selecting_localization_for_adaptation";

    await ctx.editMessageText(
      `‚úÖ –ê–¥–∞–ø—Ç–∞—Ü–∏—è #${currentAdaptation} –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n` +
        `üåç –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ #${
          currentAdaptation + 1
        }:`,
      Markup.inlineKeyboard(createLocalizationsKeyboard())
    );
  } else {
    ctx.session.step = "entering_bank";

    const adaptationsSummary = ctx.session.order.adaptations
      .map(
        (adapt, index) =>
          `–ê–¥–∞–ø—Ç–∞—Ü–∏—è #${index + 1}: ${adapt.localization} (${adapt.currency})`
      )
      .join("\n");

    await ctx.editMessageText(
      `üéâ –í—Å–µ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!\n\n` +
        `${adaptationsSummary}\n\n` +
        `üè¶ –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞:`
    );
  }

  await ctx.answerCbQuery();
});

// –£–õ–£–ß–®–ï–ù–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –ü–†–û–í–ï–†–ö–ò –û–ü–õ–ê–¢–´
bot.action("check_payment", async (ctx) => {
  debugSession(ctx); // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  
  await ctx.answerCbQuery("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–ª–∞—Ç—É...");

  try {
    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å invoiceId –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    let invoiceId = ctx.session?.invoiceId;
    
    // –ï—Å–ª–∏ –≤ —Å–µ—Å—Å–∏–∏ –Ω–µ—Ç, –∏—â–µ–º –≤ pendingPayments –ø–æ userId
    if (!invoiceId) {
      console.log(`üîç InvoiceId not found in session, searching in pending payments for user: ${ctx.from.id}`);
      
      for (const [invId, paymentData] of pendingPayments.entries()) {
        if (paymentData.userId === ctx.from.id) {
          invoiceId = invId;
          console.log(`‚úÖ Found invoiceId in pending payments: ${invoiceId}`);
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é
          if (ctx.session) {
            ctx.session.invoiceId = invoiceId;
            ctx.session.payUrl = paymentData.payUrl;
          }
          break;
        }
      }
    }

    if (!invoiceId) {
      await ctx.editMessageText(
        "‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—á–µ—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n\n" +
        "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n" +
        "‚Ä¢ –°–µ—Å—Å–∏—è –±—ã–ª–∞ —Å–±—Ä–æ—à–µ–Ω–∞\n" +
        "‚Ä¢ –°—á–µ—Ç –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω\n\n" +
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start"
      );
      return;
    }

    await ctx.editMessageText("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã...");

    const paymentStatus = await cryptoBot.checkPaymentStatus(invoiceId);
    console.log(`üìä Payment status for ${invoiceId}:`, paymentStatus);

    if (paymentStatus.status === "paid") {
      console.log(`‚úÖ Payment confirmed for invoice: ${invoiceId}`);
      
      const pendingData = getPendingPayment(invoiceId);
      if (pendingData) {
        await processSuccessfulPayment(invoiceId, pendingData);
      } else {
        // –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ –µ—Å—Ç—å –≤ CryptoBot, –Ω–æ –Ω–µ—Ç –≤ pendingPayments
        await handleOrphanedPayment(ctx, invoiceId, paymentStatus);
      }
    } else {
      await ctx.editMessageText(
        `‚ùå –û–ø–ª–∞—Ç–∞ –µ—â–µ –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª–∞.\n\n` +
        `–°—Ç–∞—Ç—É—Å: ${paymentStatus.status}\n` +
        `üí° –°–æ–≤–µ—Ç: –ò–Ω–æ–≥–¥–∞ –ø–ª–∞—Ç–µ–∂–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –¥–æ 15 –º–∏–Ω—É—Ç\n\n` +
        `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–∑–∂–µ.`,
        Markup.inlineKeyboard([
          [Markup.button.url("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", ctx.session.payUrl || "https://t.me/your_bot")],
          [Markup.button.callback("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â–µ —Ä–∞–∑", "check_payment")],
          [Markup.button.callback("üÜò –ü–æ–º–æ—â—å", "payment_help")],
        ])
      );
    }

  } catch (error) {
    console.error("‚ùå Error checking payment:", error);
    
    await ctx.editMessageText(
      "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–ø–ª–∞—Ç—ã.\n\n" +
      "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.\n" +
      "–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
      Markup.inlineKeyboard([
        [Markup.button.callback("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", "check_payment")],
        [Markup.button.callback("üÜò –ü–æ–º–æ—â—å", "payment_help")],
      ])
    );
  }
});

// –û–ë–†–ê–ë–û–¢–ß–ò–ö –ü–û–ú–û–©–ò –ü–û –ü–õ–ê–¢–ï–ñ–ê–ú
bot.action("payment_help", async (ctx) => {
  await ctx.answerCbQuery("üìû –ü–æ–º–æ—â—å –ø–æ –æ–ø–ª–∞—Ç–µ");
  
  await ctx.editMessageText(
    `üÜò *–ü–æ–º–æ—â—å –ø–æ –æ–ø–ª–∞—Ç–µ*\n\n` +
    `*–ï—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞, –Ω–æ –±–æ—Ç –Ω–µ –≤–∏–¥–∏—Ç:*\n` +
    `‚Ä¢ –ü–ª–∞—Ç–µ–∂–∏ –º–æ–≥—É—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –¥–æ 15 –º–∏–Ω—É—Ç\n` +
    `‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –≤–∞—à–µ–º –∫–æ—à–µ–ª—å–∫–µ\n` +
    `‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–ª–∞—Ç–µ–∂ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å\n\n` +
    `*–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã:*\n` +
    `1. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç\n` +
    `2. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${ctx.session?.invoiceId || '–Ω–µ –Ω–∞–π–¥–µ–Ω'}\n` +
    `3. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π\n\n` +
    `*–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞:* @your_support_username`,
    { 
      parse_mode: "Markdown",
      ...Markup.inlineKeyboard([
        [Markup.button.callback("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", "check_payment")],
        [Markup.button.callback("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu")],
      ])
    }
  );
});

// –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ
bot.action("main_menu", async (ctx) => {
  await ctx.answerCbQuery("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é");
  
  ctx.session = {
    step: "main_menu",
    welcomeSent: true,
    hasInteracted: true
  };
  
  await ctx.editMessageText(
    "üè† *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n\n" +
    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
    {
      parse_mode: "Markdown",
      ...Markup.inlineKeyboard([
        [Markup.button.callback("üöÄ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑", "new_order")],
        [Markup.button.callback("üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã", "my_orders")],
        [Markup.button.callback("‚ÑπÔ∏è –ü–æ–º–æ—â—å", "help")],
      ])
    }
  );
});

// –ù–û–í–´–ô –ó–ê–ö–ê–ó –ò–ó –ì–õ–ê–í–ù–û–ì–û –ú–ï–ù–Æ
bot.action("new_order", async (ctx) => {
  await ctx.answerCbQuery("üöÄ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑");
  
  ctx.session = {
    step: "awaiting_order_number",
    order: {
      adaptations: []
    }
  };
  
  await ctx.editMessageText(
    "üöÄ *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑*\n\n" +
    "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞:",
    { parse_mode: "Markdown" }
  );
});

// –ó–ê–ì–õ–£–®–ö–ò –î–õ–Ø –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–• –ö–ù–û–ü–û–ö
bot.action("my_orders", async (ctx) => {
  await ctx.answerCbQuery("üìã –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–æ–≤...");
  await ctx.editMessageText(
    "üìã *–ú–æ–∏ –∑–∞–∫–∞–∑—ã*\n\n" +
    "–§—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n\n" +
    "–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è –∏—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤.",
    {
      parse_mode: "Markdown",
      ...Markup.inlineKeyboard([
        [Markup.button.callback("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu")],
      ])
    }
  );
});

bot.action("help", async (ctx) => {
  await ctx.answerCbQuery("‚ÑπÔ∏è –ü–æ–º–æ—â—å");
  await ctx.editMessageText(
    `‚ÑπÔ∏è *–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É*\n\n` +
    `*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n` +
    `/start - –ù–∞—á–∞—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞\n` +
    `/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n` +
    `*–¢–µ—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n` +
    `/test_notion - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Notion\n` +
    `/test_simple - –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç\n` +
    `/test_notion_safe - –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ç–µ—Å—Ç\n\n` +
    `*–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–∫–∞–∑–∞:*\n` +
    `1. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞\n` +
    `2. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–¥–∞–ø—Ç–∞—Ü–∏–π\n` +
    `3. –£–∫–∞–∂–∏—Ç–µ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –≤–∞–ª—é—Ç—ã\n` +
    `4. –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –±–∞–Ω–∫–∞ –∏ —Å—É–º–º—É\n` +
    `5. –û–ø–ª–∞—Ç–∏—Ç–µ —Å—á–µ—Ç –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π\n\n` +
    `üí° *–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7 –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–ª–∞—Ç–µ–∂–∏!*`,
    {
      parse_mode: "Markdown",
      ...Markup.inlineKeyboard([
        [Markup.button.callback("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu")],
      ])
    }
  );
});

bot.action("cancel_payment", async (ctx) => {
  await ctx.answerCbQuery("‚ùå –û—Ç–º–µ–Ω—è–µ–º –æ–ø–ª–∞—Ç—É...");

  const invoiceId = ctx.session.invoiceId;
  if (invoiceId) {
    removePendingPayment(invoiceId);
  }

  ctx.session.step = "completed";
  ctx.session.order = {};
  ctx.session.invoiceId = null;
  ctx.session.payUrl = null;
  ctx.session.currentAdaptation = null;

  await ctx.editMessageText(
    "‚ùå –û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n" +
      "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start"
  );
});

setInterval(() => {
  processAndSendLinks(bot);
}, 1 * 60 * 1000);

// ========== –ó–ê–ü–£–°–ö –ë–û–¢–ê ==========

let phantomActivity;

async function startBot() {
  try {
    console.log("üöÄ Starting bot with enhanced features...");

    // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await bot.launch();
    console.log("‚úÖ Bot started successfully");
    console.log("ü§ñ Bot is ready to receive commands");

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏
    startAutoChecking(15);
    startPaymentChecking();

    // –ó–∞–ø—É—Å–∫–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    phantomActivity = activityManager.startEnhancedPhantomActivity();

    console.log(`‚è≥ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ ${pendingPayments.size} pending –ø–ª–∞—Ç–µ–∂–µ–π`);
    console.log("üëª Enhanced phantom activity manager: ACTIVE");
    console.log("üëã Welcome messages: ENABLED");

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —É—Å–ø–µ—à–Ω–æ–º –∑–∞–ø—É—Å–∫–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    try {
      await bot.telegram.sendMessage(
        config.ADMIN_CHAT_ID, // –î–æ–±–∞–≤—å—Ç–µ ID –∞–¥–º–∏–Ω–∞ –≤ –∫–æ–Ω—Ñ–∏–≥
        "ü§ñ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!\n" +
          `‚úÖ –í–µ—Ä—Å–∏—è: Enhanced Activity + Welcome\n` +
          `‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString("ru-RU")}\n` +
          `üîÑ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: Enhanced Phantom Mode`
      );
    } catch (adminError) {
      console.log(
        "‚ÑπÔ∏è Admin notification not sent (config.ADMIN_CHAT_ID not set)"
      );
    }
  } catch (error) {
    console.error("‚ùå Failed to start bot:", error);

    // –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
      console.log("üîÑ Attempting to restart bot...");
      startBot();
    }, 30000);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º setupBotCommands –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
setupBotCommands(bot);

// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
startBot();

// ========== GRACEFUL SHUTDOWN ==========

process.once("SIGINT", () => {
  console.log("üõë Stopping bot...");
  stopAutoChecking();
  stopPaymentChecking();
  if (phantomActivity) {
    phantomActivity.stop();
  }
  bot.stop("SIGINT");
});

process.once("SIGTERM", () => {
  console.log("üõë Stopping bot...");
  stopAutoChecking();
  stopPaymentChecking();
  if (phantomActivity) {
    phantomActivity.stop();
  }
  bot.stop("SIGTERM");
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
process.on("uncaughtException", (error) => {
  console.error("üö® UNCAUGHT EXCEPTION:", error);
});

process.on("unhandledRejection", (reason, promise) => {
  console.error("üö® UNHANDLED REJECTION at:", promise, "reason:", reason);
});

bot.catch((error, ctx) => {
  console.error("ü§ñ Bot error:", error);
});